syntax = "proto3";

package janus;

option go_package = "github.com/JaneliaSciComp/janus/proto";

enum DataFormat {
    N5 = 0; // Only one initially implemented.
    ZARR = 1; 
    NG_UNSHARDED = 2;
    NG_SHARDED = 3;
}

message DatasetSpec {
    // Dataset path to location of chunk data with optional prefix to indicate
    // cloud storage provider. Includes "s3://" for AWS S3, "gs://" for Google Cloud Storage.
    string path = 1;

    // How we want to layout the chunk data on backing storage
    DataFormat layout = 2;

    // Number of dimensions
    uint32 numDims = 3;

    // Number of bits required for each dimension
    repeated uint32 dimBits = 4;

    // DataFormat-specific metadata that should be stored in creating datasets on backing storage
    string metadata = 5;
}

// ChunkCoord is a nD coordinate for a chunk of data.
message ChunkCoord {
    repeated uint64 coord = 1;
}

// ChunkRefs give advanced clients location of last change for given chunks
//  via (version, chunk coord) tuple.
message ChunkRefs {
    repeated uint64 versions = 1;
    repeated ChunkCoord coords = 2;
}

// Note: If serialization/deserialization of large chunk data is too costly,
//  we can bypass embedding in protobuf message and send directly afterwards.
//  After we determine our actual workflow requirements, we can test CapnProto 
//  since API is small and retooling not so costly. This isn't a factor 
//  if the client writes/reads directly from the chunk storage using the
//  advanced client rpcs: GetVersionChunkRefs() and MarkIngestedChunks().
message Chunk {
    ChunkCoord coord = 1;
    bytes data = 2; // whole message must be less than 2GiB (protobuf limit)
}

message Chunks {
    repeated Chunk chunks = 1;
}

service ChunkIndexer {
    // Initializes space for tracking chunks of a new dataset
    rpc NewDataset(NewDatasetRequest) returns (NewDatasetResponse);

    // Returns an uncommitted version where chunks can be written.
    // Its git equivalent would be a working directory.  If an 
    // uncommitted version for branch already exists, it returns that.
    rpc OpenWritableVersion(OpenRequest) returns (OpenResponse); 

    // Commits a writable version.
    rpc CommitVersion(CommitRequest) returns (CommitResponse); 

    // Write chunks to a writable version.
    rpc WriteChunks(WriteRequest) returns (WriteResponse);

    // Read chunks from a version.
    rpc ReadChunks(ReadRequest) returns (Chunks);

    // ---- For advanced clients that read/write directly to backing storage.

    // Get location of chunks, (version, chunk coord) tuples, for set of chunk coords at a given version.
    rpc GetVersionChunkRefs(ReadRequest) returns (ChunkRefs);

    // Update the Janus server index for chunks that have been altered using direct writes to chunk storage.
    rpc MarkIngestedChunks(MarkIngestedRequest) returns (MarkIngestedResponse);
}

// ---- Request messages.

message NewDatasetRequest {
    DatasetSpec spec = 1;
}

message OpenRequest {
    string datasetPath = 1;
    
    string branch = 2;  // determined by client: "main", task + user, task + program, etc. (git-equivalent branch)
    optional uint64 parent = 3; // parent version; required if branch doesn't exist.
    optional bool base = 4; // if true, previous index is discarded and we assume there's a fresh nD volume.
}

message CommitRequest {
    uint64 version = 1;
    string message = 2;
}

message WriteRequest {
    uint64 version = 1;
    Chunks chunks = 2;
}

message ReadRequest {
    uint64 version = 1;
    repeated ChunkCoord coords = 2;
}

message MarkIngestedRequest {
    uint64 version = 1;
    repeated ChunkCoord coords = 2;
}

// ---- Response messages, all currently empty but data can be added while maintaining backwards-compatibility.

message OpenResponse {
    uint64 version = 1;
}

message NewDatasetResponse {}
message CommitResponse {}
message WriteResponse {}
message MarkIngestedResponse {}
